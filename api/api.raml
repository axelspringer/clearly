#%RAML 0.8
title: Blackbeard
version: v1
protocols: [ HTTP, HTTPS ]
baseUri: https://localhost:8080/{version}
mediaType: application/json
documentation:
  - title: Introduction
    content: !include docs/introduction.md
  - title: Getting Started
    content: !include docs/getting-started.md
  - title: Authentication
    content: !include docs/authentication.md
schemas:
  - channel: !include schemas/channel.schema.json
  - ok: !include schemas/ok.schema.json
  - creation: !include schemas/creation.schema.json
  - template: !include schemas/template.schema.json
  - contenTypes: !include schemas/contentTypes.schema.json
  - content: !include schemas/content.schema.json
resourceTypes:
  - base: !include resources/base.rs.raml
traits:
  - limitable: !include traits/limitable.trait.raml
  - acceptCallback: !include traits/acceptCallback.trait.raml

/content:
  displayName: Content
  description: |
    Endpoint to work with `content` which are collections of `contentTypes`

/content.types:
  displayName: Content Types
  description: |
    Endpoint to work with `contentTypes` which are supported types in the UI.

/template:
  displayName: Template
  description: |
    Endpoint to work with the data model (template). A template is a structure which combines `meta` types and `content` types into a managable entity. Templates can be aggregated by `channels`.
  /{templateId}:
    type: base
    description: |
      A specific template, identified by its `id`
    uriParameters:
      templateId:
        description: |
          The `id` of the template to retrieve
        required: true
        example: 123
    get:
      description: |
        Retrieve the template with `id`
      responses:
        200:
          body:
            application/json:
              schema: template
              example: !include examples/template.example.json

/meta:
  displayName: Metadata
  description: |
    Endpoint to work with `meta` data types.
  /{metaDataId}:
    type: base
    uriParameters:
      metaDataId:
        description: |
          The `id` of the metadata object to retrieve
        required: true
        example: 123
    get:
      description: |
        Retrieve the metadata object with `id`
      responses:
        200:
          body:
            application/json:
              schema: template
              example: !include examples/meta.example.json


/ok:
  displayName: Status
  description: |
    Endpoint to check for status.
